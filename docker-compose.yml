version: '3.8'

services:
  # 1. Infrastructure Services
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP protocol port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Backend Services
  order-api:
    build:
      context: ./order-api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/restaurant_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  kitchen-worker:
    build:
      context: ./kitchen-worker
      dockerfile: Dockerfile
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/restaurant_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - WORKER_COUNT=3
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      order-api:
        condition: service_started

  # 3. Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000
    depends_on:
      - order-api

volumes:
  mongodb_data: 